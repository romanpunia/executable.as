#Query embedding specifics (with compilation)
set(BUFFER_DATA "#ifndef HAS_PROGRAM_HEX\n#define HAS_PROGRAM_HEX\n#include <string>\n\nnamespace program_hex\n{\n\tvoid foreach(void* context, void(*callback)(void*, const char*, unsigned))\n\t{\n\t\tif (!callback)\n\t\t\treturn;\n")
set(BUFFER_OUT "${PROJECT_SOURCE_DIR}/src/program")
set(FILENAME "program_hex")
file(READ "${PROJECT_SOURCE_DIR}/src/program.hex" FILEDATA LIMIT 262144)
if (NOT FILEDATA STREQUAL "")
    string(LENGTH "${FILEDATA}" FILESIZE)
    if (FILESIZE GREATER 16384)
        set(FILEOFFSET 0)
        string(APPEND BUFFER_DATA "\n\t\tstd::string dc_${FILENAME};\n\t\tdc_${FILENAME}.reserve(${FILESIZE});")
        while (FILEOFFSET LESS FILESIZE)
            math(EXPR CHUNKSIZE "${FILESIZE}-${FILEOFFSET}")
            if (CHUNKSIZE GREATER 16384)
                set(CHUNKSIZE 16384)
                string(SUBSTRING "${FILEDATA}" "${FILEOFFSET}" "${CHUNKSIZE}" CHUNKDATA)
            else()
                string(SUBSTRING "${FILEDATA}" "${FILEOFFSET}" "-1" CHUNKDATA)
            endif()
            string(APPEND BUFFER_DATA "\n\t\tdc_${FILENAME} += \"${CHUNKDATA}\";")
            math(EXPR FILEOFFSET "${FILEOFFSET}+${CHUNKSIZE}")
        endwhile()
        string(APPEND BUFFER_DATA "\n\t\tcallback(context, dc_${FILENAME}.c_str(), (unsigned int)dc_${FILENAME}.size());\n")
    else()
        string(APPEND BUFFER_DATA "\n\t\tconst char* sc_${FILENAME} = \"${FILEDATA}\";\n\t\tcallback(context, sc_${FILENAME}, ${FILESIZE});\n")
    endif()    
endif()
string(APPEND BUFFER_DATA "\t}\n}\n#endif")
file(WRITE ${BUFFER_OUT}.hpp "${BUFFER_DATA}")	
list(APPEND SOURCE "${BUFFER_OUT}.hpp")
message(STATUS "Program bytecode hex was written to: ${BUFFER_OUT}.hpp")